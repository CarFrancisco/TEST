<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module S_Path&#xD;
</HiddenHeader><SerialData/><SerialDeviceHmiId/><SerialScaleData/><Text>'*************************************************************************************&#xD;
'* 													Path and USB management&#xD;
'*		Autor:		Pierre Clot&#xD;
'*		Date:		31.05.2023&#xD;
'*		Version: 	1&#xD;
'*&#xD;
'*		Description :&#xD;
'*		Management of recipe system for PCS, with status and text on the header.&#xD;
'*&#xD;
'*		v1:	Add header&#xD;
'*&#xD;
'*************************************************************************************&#xD;
&#xD;
&#xD;
' Path of disk, the \ at start work with the NA and simulation&#xD;
Public Const SD As String 			= 	"\SDCard\"							' Omron standard path of SD card&#xD;
Public Const USB1 As String  		= "\USBDisk\"							' Omron standard path of USB disk 1&#xD;
Public Const USB2 As String		= "\USBDisk2\"						' Omron standard path of USB disk 2&#xD;
Public Const FTP As String  		= "\User\SysmacHMI\FTP\"		' Omron standard path of FTP&#xD;
Private Const SYS32 As String 	= "\Windows\System32\"			' This directory does not exist in the NA&#xD;
&#xD;
' Directory name&#xD;
Private Const RECIPE As String  	= "Recipes"								' Directory of transfered recipe&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Get the recipes path. It finish with "\"&#xD;
''' &lt;/summary&gt;&#xD;
Public ReadOnly Property IsSimulation As Boolean&#xD;
    Get&#xD;
		Return System.IO.Directory.Exists(SYS32)&#xD;
    End Get&#xD;
End Property&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Get the recipes path. It finish with "\"&#xD;
''' &lt;/summary&gt;&#xD;
Public ReadOnly Property RECIPES As String&#xD;
    Get&#xD;
		Return SD &amp; RECIPE &amp; "\"	&#xD;
    End Get&#xD;
End Property&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Get the recipes path for transfert in the selected USB device. It finish with "\"&#xD;
''' &lt;/summary&gt;&#xD;
Public ReadOnly Property TRANSFERT As String&#xD;
    Get&#xD;
		Return _USBpath + RECIPE + "\"	&#xD;
    End Get&#xD;
End Property&#xD;
&#xD;
&#xD;
#Region "SD card"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Check if the SD card is present&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;returns&gt;&lt;/returns&gt;&#xD;
Public Function SD_IsPresent As Boolean&#xD;
	&#xD;
	' Check if the SD path is existing&#xD;
	Return System.IO.Directory.Exists(SD)&#xD;
&#xD;
End Function&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "USB"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Current USB path selected, empty for no USB device&#xD;
''' &lt;/summary&gt;&#xD;
Public Property USB_Path As String&#xD;
	&#xD;
    Get&#xD;
		' Get the current path&#xD;
		Return _USBpath&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal value As String)&#xD;
		' Check if the state change&#xD;
		If _USBpath &lt;&gt; value Then&#xD;
			&#xD;
			' Update value&#xD;
        	_USBpath = value&#xD;
		End If&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _USBpath As String = ""&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The NA have an USB device on port 1&#xD;
''' &lt;/summary&gt;&#xD;
Public Property AsUSB1 As Boolean&#xD;
	&#xD;
    Get&#xD;
        Return _AsUSB1&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal value As Boolean)&#xD;
		&#xD;
		' Check if the state change&#xD;
		If _AsUSB1 &lt;&gt; value Then&#xD;
			&#xD;
			' Set path&#xD;
			If value Then&#xD;
				' When USB stick is detected, and no path selected&#xD;
				If USB_Path = "" Then&#xD;
					USB_Path = USB1		'Set path for USB 1&#xD;
				End If&#xD;
			Else&#xD;
				' When USB stick is not detected, reset path&#xD;
				If USB_Path = USB1 Then&#xD;
					' Except if USB 2 is enabled&#xD;
					If (_AsUSB2)&#xD;
						USB_Path = USB2		'Set path for USB 2&#xD;
					Else&#xD;
						USB_Path = ""&#xD;
					End If&#xD;
				End If&#xD;
			End If		&#xD;
			&#xD;
			' Update value&#xD;
        	_AsUSB1 = value&#xD;
		End If&#xD;
		&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _AsUSB1 As Boolean = False&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The NA have an USB device on port 2&#xD;
''' &lt;/summary&gt;&#xD;
Public Property AsUSB2 As Boolean&#xD;
	&#xD;
    Get&#xD;
        Return _AsUSB2&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal value As Boolean)&#xD;
		&#xD;
		' Check if the state change&#xD;
		If _AsUSB2 &lt;&gt; value Then&#xD;
			&#xD;
			' Set path&#xD;
			If value Then&#xD;
				' When USB stick is detected, and no path selected&#xD;
				If USB_Path = "" Then&#xD;
					USB_Path = USB2		'Set path for USB 2&#xD;
				End If&#xD;
			Else&#xD;
				' When USB stick is not detected, reset path&#xD;
				If USB_Path = USB2 Then&#xD;
					' Except if USB 2 is enabled&#xD;
					If (_AsUSB1)&#xD;
						USB_Path = USB1		'Set path for USB 1&#xD;
					Else&#xD;
						USB_Path = ""&#xD;
					End If&#xD;
				End If&#xD;
			End If		&#xD;
			&#xD;
			' Update value&#xD;
        	_AsUSB2 = value&#xD;
		End If&#xD;
		&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _AsUSB2 As Boolean = False&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Check is some USB device are connected to the NA.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub CheckUSB()&#xD;
	&#xD;
	Dim intDeviceNr As Integer&#xD;
	Dim strDeviceName(1) As String&#xD;
	&#xD;
	' Get USB device name&#xD;
	GetConnectedUSBDevices(intDeviceNr, strDeviceName)&#xD;
	&#xD;
	Select Case intDeviceNr&#xD;
		Case 0&#xD;
			AsUSB1 = False	&#xD;
			AsUSB2 = False&#xD;
&#xD;
		Case 1	&#xD;
			' Check witch USB device is detected&#xD;
			If strDeviceName(0).Trim("\"c) = USB1.Trim("\"c) 	Then	 AsUSB1 = True	: AsUSB2 = False&#xD;
			If strDeviceName(0).Trim("\"c) = USB2.Trim("\"c)	Then AsUSB1 = False	: AsUSB2 = True&#xD;
				&#xD;
		Case 2&#xD;
			AsUSB1 = True	&#xD;
			AsUSB2 = True&#xD;
			&#xD;
	End Select&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Eject the curent USB drive.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub EjectUSB&#xD;
	&#xD;
	' Only if it's not a simulation and we have a path&#xD;
	If _USBpath &lt;&gt; "" Then&#xD;
	&#xD;
		' Eject current usb drive&#xD;
		If _USBpath = USB1 Then&#xD;
			EjectUSBDevice(USB1)&#xD;
			AsUSB1 = False&#xD;
		ElseIf _USBpath = USB2 Then&#xD;
			EjectUSBDevice(USB2)&#xD;
			AsUSB2 = False&#xD;
		End If&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Use the USB drive 1.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetUSB_1&#xD;
	&#xD;
	' Only if it's not a simulation and we have a path&#xD;
	If AsUSB1 Then&#xD;
		' Change current path&#xD;
		USB_Path = USB1&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Use the USB drive 2.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetUSB_2&#xD;
	&#xD;
	' Only if it's not a simulation and we have a path&#xD;
	If AsUSB2 Then&#xD;
		' Change current path&#xD;
		USB_Path = USB2&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
</Text></CodeEditorModel>