<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module S_Startup&#xD;
</HiddenHeader><SerialData/><SerialDeviceHmiId/><SerialScaleData/><Text>'*************************************************************************************&#xD;
'* 													Startup management&#xD;
'*		Autor:		Pierre Clot&#xD;
'*		Date:		21.08.2023&#xD;
'*		Version: 	S02V01&#xD;
'*&#xD;
'*		Variables to change depending on the machine:&#xD;
		#Const PCS = False&#xD;
		#Const Metal = False&#xD;
		Private Const IP_ADDR_END As UShort = 100&#xD;
'*&#xD;
'*		Description :&#xD;
'*		Global configuration of the HMI at startup&#xD;
'*	&#xD;
'*		S02V01:	PC	&#xD;
'*						- Group machine by number&#xD;
'*						- Add PCS const&#xD;
'*						- Put index in function&#xD;
'*&#xD;
'*		S02V00:	Timoth√©e Van Hove: 	&#xD;
'*						-Added a function for the machine definition to reduce the amount of lines of code&#xD;
'*						-Modified the _CheckIpAddress function&#xD;
'*						-PCS and BDA S_Startup are now identical&#xD;
'*						-Added a function to call cmd.exe&#xD;
'*************************************************************************************&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Must be called at the project startup!&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnStart()&#xD;
	&#xD;
	'Check if the HMI is launched in simulation or not&#xD;
	If S_Path.IsSimulation Then _Simulation()&#xD;
	&#xD;
	'Initialize the machine settings&#xD;
	Machine_Def()&#xD;
	&#xD;
	' Init the navigation&#xD;
	Call S_Nav.Home()&#xD;
	&#xD;
	'Init S_Users&#xD;
	Call S_Users.Startup()&#xD;
	S_Log.SystemIsStarting() ' TODO =&gt; Recode the Log management&#xD;
	&#xD;
	'Check the IpAddress to determine if the HMI is master&#xD;
	User.IsMaster = IsInSimulation OrElse _CheckIpAddress(IP_ADDR_END)&#xD;
	&#xD;
	If User.IsMaster Then&#xD;
		' Restore all recipe&#xD;
		Call S_Users.Restore()&#xD;
		&#xD;
	#If PCS Then&#xD;
		Call S_Start.Restore()&#xD;
		&#xD;
		' Initalize recipe system&#xD;
		Call S_Recipe.Fill_Viewer()&#xD;
	#End If&#xD;
	&#xD;
		Call S_Recipe.Startup()&#xD;
	Else&#xD;
		' If the HMI is a slave, check external login&#xD;
		If HMI.Users.Level &lt;&gt; 0 Then&#xD;
			Call S_Users.External_LogIn()&#xD;
		Else&#xD;
			Call S_Users.LogOutCurrentUser()&#xD;
		End If &#xD;
	End If &#xD;
	&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Routine executed when the HMI is powered. Initialize the line default parameters (either metal or irrigation)&#xD;
''' &lt;/summary&gt;&#xD;
Sub Machine_Def()&#xD;
#If PCS Then&#xD;
	Dim nb As Short = 0&#xD;
&#xD;
	' 0 : FLD&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 1, "FLD", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.FLD.Used, True, True, 1, "FLD", Rcp_FLD)&#xD;
	#End If&#xD;
&#xD;
	' 1 : FDI&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 2, "FDI", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.FDI.Used, True, True, 2, "FDI", Rcp_FDI)&#xD;
	#End If&#xD;
&#xD;
	' 2 : FBI&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 2, "FBI", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.FBI.Used, True, True, 2, "FBI", Rcp_FBI)&#xD;
	#End If&#xD;
&#xD;
	' 3 : EXU&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 3, "EXU", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M03.Used, True, True, 3, "M03", Rcp_M03)&#xD;
	#End If&#xD;
	&#xD;
	' 4 : SRX&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, True, 4, "SRX", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M04.Used, False, True, 4, "M04", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 5 : ENS&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 5, "ENS", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M05.Used, True, True, 5, "M05", Rcp_M05)&#xD;
	#End If&#xD;
	&#xD;
	' 6 : M43&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, Opt.M43.Used, 43, "M43", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M43.Used, True, Opt.M43.Used, 43, "M43", Rcp_M43)&#xD;
	#End If&#xD;
	&#xD;
	' 7 : SDA&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, True, 6, "SDA", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 6, "SDA", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 8 : VCR&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 7, "VCR", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.VCR.Used, True, True, 7, "VCR", Rcp_VCR)&#xD;
	#End If&#xD;
	&#xD;
	' 9 : RES&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, True, 8, "RES", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.VCR.Osmosis_Used, False, True, 8, "RES", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 10 : BRF&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, True, 9, "BRF", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.VCR.BRF_Used, False, True, 9, "BRF", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 11 : ST100&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, True, 10, "ST", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, True, False, True, 10, "ST", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 12 : PSP&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, False, 12, "PSP", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.Puncher.PSP, True, Opt.Puncher.PSP, 12, "PSP", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 13 : PMP&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, False, 12, "PMP", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.Puncher.PMP, True, Opt.Puncher.PMP, 12, "PMP", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 14 : PLP&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, False, 12, "PLP", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.Puncher.PLP, True, Opt.Puncher.PLP, 12, "PLP", Rcp_PLP)&#xD;
	#End If&#xD;
	&#xD;
	' 15 : TMP&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, False, 12, "TMP", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.Puncher.TMP, True, Opt.Puncher.TMP, 12, "TMP", Rcp_TMP)&#xD;
	#End If&#xD;
	&#xD;
	' 16 : TLP&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, False, 12, "TLP", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.Puncher.TLP, True, Opt.Puncher.TLP, 12, "TLP", Rcp_TLP)&#xD;
	#End If&#xD;
	&#xD;
	' 17 : BDA&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, True, 15, "BDA", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.BDA.Used, True, True, 15, "BDA", Rcp_BDA)&#xD;
	#End If&#xD;
	&#xD;
	' 18 : ATH&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, True, 17, "ATH", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.ATH.Used, False, True, 17, "ATH", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 19 : Sysmeric 1&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M50.Used, False, Opt.M50.Used, 50, "M50", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M50.Used, True, Opt.M50.Used, 50, "M50", Rcp_M50)&#xD;
	#End If&#xD;
	&#xD;
	' 20 : Sysmetric 2&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M51.Used, False, Opt.M51.Used, 51, "M51", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M51.Used, True, True, 51, "M51", Rcp_M51)&#xD;
	#End If&#xD;
	&#xD;
	' 21 : PCS&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, True, True, True, 99, "PCS", Rcp_PCS)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, True, True, True, 99, "PCS", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 22 : DBV1&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.DBV1.Used, True, True, 1, "DBV1", Rcp_DBV1)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 1, "DBV1", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 23 : DBV2&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.DBV2.Used, True, True, 2, "DBV2", Rcp_DBV2)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 2, "DBV2", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 24 : SLT&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, True, False, True, 5, "SLT", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 5, "SLT", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 25 : ABH&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.ABH.Used, True, True, 7, "ABH", Rcp_ABH)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 7, "ABH", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 26 : LSL&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, True, True, False, 11, "LSL", Rcp_LSL)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 11, "LSL", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 27 : CHT1&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.CHT1.Used, False, True, 15, "CHT1", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 15, "CHT1", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 28 : CHT2&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.CHT2.Used, False, True, 17, "CHT2", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 17, "CHT2", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	 ' 29 : CHT3&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.CHT3.Used, False, True, 18, "CHT3", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 18, "CHT3", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 30 : Extruder tube int&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M40.Used, True, True, 40, "M40", Rcp_M40)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 40, "M40", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 31 : Head tube int&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M56.Used, False, True, 56, "M56", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 56, "M56", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 32 : Extruder glue int&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M41.Used, True, True, 41, "M41", Rcp_M41)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 41, "M41", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 33 : Head glue int&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M57.Used, False, True, 57, "M57", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 57, "M57", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 34 : Extruder glue ext&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M42.Used, True, True, 42, "M42", Rcp_M42)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 42, "M42", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 35 : Extruder tube ext&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M43.Used, True, True, 43, "M43", Rcp_M43)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 43, "M43", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 36 : Extruder line&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb,  Opt.M44.Used, True, True, 44, "M44", Rcp_M44)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, True, 44, "M44", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 37 : Head tube ext&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M58.Used, False, True, 58, "M58", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 58, "M58", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 38 : Sikora - Diameter interior&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M26.Used, False, False, 26, "M26", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 26, "M26", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 39 : Sikora - Diameter exterior&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M27.Used, False, False, 27, "M27", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 27, "M27", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 40 : Compacter&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, True, False, True, 12, "CPC", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 12, "CPC", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 41 : CHTs&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.CHT1.Used Or Opt.CHT1.Used Or Opt.CHT3.Used, True, False, 17, "CHTs", Rcp_CHT)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, False, 17, "CHTs", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 42 : BFUS&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 19, "BFU", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.BFU.Used, True, True, 19, "BFU", Rcp_BFU)&#xD;
	#End If&#xD;
	&#xD;
	' 43 : Extruder BFU&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 31, "M31", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M31.Used, True, True, 31, "M31", Rcp_M31)&#xD;
	#End If&#xD;
	&#xD;
	' 44 : MTL&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, False, 55, "MTL", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.MTL.Used, False, False, 55, "MTL", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 45 : Priter PRT&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, True, 99, "PRT", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M99.Printer_Used, True, False, 99, "PRT", Rcp_PRT)&#xD;
	#End If&#xD;
	&#xD;
	' 46 : LCP&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.LCP.Used, False, True, 9, "LCP", Rcp_LSL)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 9, "LCP", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 47 : FWM&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.FWM.Used, False, True, 11, "FWM", Rcp_LSL)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, True, 11, "FWM", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 48 : RBV&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.RBV.Used, False, False, 81, "RBV", Rcp_LSL)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 81, "RBV", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 49 : Sysmeric 3&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M52.Used, False, Opt.M52.Used, 52, "M52", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M52.Used, True, False, 52, "M52", Rcp_M52)&#xD;
	#End If&#xD;
	&#xD;
	' 50 : Sysmetric 4&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M53.Used, False, Opt.M53.Used, 53, "M53", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 53, "M53", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 51 : EFD&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.EFD.Used, True, False, 70, "EFD", Rcp_EFD)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, False, 70, "EFD", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 52 : X-ray - Diameter tube interior&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M28.Used, False, False, 28, "M28", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 28, "M28", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 53 : X-ray - Diameter tube exterior&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M29.Used, False, False, 29, "M29", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 29, "M29", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 54 : Sikora laser after glue extruder&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M36.Used, False, False, 36, "M36", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 36, "M36", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 55 : Sikora laser after conpacting&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, Opt.M37.Used, False, False, 37, "M37", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 37, "M37", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 56 : Scrap marking device&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, False, 98, "EMD", Rcp_EMD)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, True, False, 98, "EMD", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 57 : TPC - Tape extruder head&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, False, 18, "TPC", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.M31.Used, False, False, 18, "TPC", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 58 : CHT - Irrigation caterpillar&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, False, False, 11, "CHT", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.CHT.Used, False, False, 11, "CHT", Nothing)&#xD;
	#End If&#xD;
	&#xD;
	' 59 : ADC - Single torche coiler&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, False, True, False, 16, "ADC", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, Opt.ADC.Used, True, False, 16, "ADC", Rcp_ADC)&#xD;
	#End If&#xD;
	&#xD;
	' 60 : Coil manager&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, True, True, False, 99, "CUT", Rcp_CUT)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 99, "CUT", Nothing)&#xD;
	#End If	&#xD;
	&#xD;
	' 61 : Coil manager&#xD;
	#If Metal Then&#xD;
		_SetMachineProperties(nb, True, True, False, 12, "CPM", Nothing)&#xD;
	#Else&#xD;
		_SetMachineProperties(nb, False, False, False, 12, "CPM", Nothing)&#xD;
	#End If	&#xD;
	&#xD;
	' Save number max of machine&#xD;
	MachineMax = nb&#xD;
#End If&#xD;
End Sub&#xD;
&#xD;
Private Sub _SetMachineProperties(ByRef index As Integer, ByVal isEnabled As Boolean, ByVal hasRecipe As Boolean, ByVal hasHelp As Boolean, ByVal number As Integer, ByVal code As String, ByVal recipeInfo As String)&#xD;
#If PCS Then&#xD;
	Machine(index).Enabled = isEnabled&#xD;
    Machine(index).Recipe = hasRecipe&#xD;
    Machine(index).Help = hasHelp&#xD;
    Machine(index).Number = number&#xD;
    Machine(index).Code = code&#xD;
    Machine(index).Name = GetResourceString("THE_Machine_" + Machine(index).Code)&#xD;
    If String.IsNullOrEmpty(recipeInfo) Then&#xD;
        Machine(index).Info = Machine(index).Code + ": " + "-"&#xD;
    Else&#xD;
        Machine(index).Info = Machine(index).Code + ": " + recipeInfo&#xD;
    End If&#xD;
	&#xD;
	index = index + 1&#xD;
#End If&#xD;
End Sub&#xD;
&#xD;
Private Sub _Simulation&#xD;
	IsInSimulation = True&#xD;
	Call S_Users.AutoLog()&#xD;
	&#xD;
#If PCS And Not Metal Then&#xD;
	PCS.Sta.LIT = True&#xD;
	PCS.Sta.LIR = False&#xD;
	&#xD;
	If PCS.Sta.LIR Then&#xD;
		Opt.FLD.Used = True&#xD;
		Opt.FDI.Used = True&#xD;
		Opt.M43.Used = True&#xD;
	End If &#xD;
	&#xD;
	If PCS.Sta.LIT Then&#xD;
		Opt.BFU.Used = True&#xD;
		Opt.M31.Used = True&#xD;
		Opt.Puncher.TLP = True&#xD;
	End If&#xD;
&#xD;
	' Standard machine&#xD;
	Opt.M03.Used = True&#xD;
	Opt.M05.Used = True&#xD;
	Opt.VCR.Used = True&#xD;
	&#xD;
	' Sysmetric&#xD;
	Opt.M50.Used = True&#xD;
	Opt.M50.Mat1_Used = True&#xD;
	Opt.M50.Mat2_Used = True&#xD;
	Opt.M50.Mat3_Used = True&#xD;
	PCS.Sta.Sens = True&#xD;
#End If&#xD;
&#xD;
	User.IsMaster = True&#xD;
End Sub&#xD;
&#xD;
' Opens cmd.exe on the NA&#xD;
Sub CmdExe()&#xD;
	Dim process As New System.Diagnostics.Process()&#xD;
    process.StartInfo.FileName = "cmd.exe"&#xD;
    process.StartInfo.UseShellExecute = False&#xD;
&#xD;
    process.Start()&#xD;
    process.WaitForExit()&#xD;
    process.Close()&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns True if the 3 last digits of the HMI IP address finishes by the number defined in parameters&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;returns&gt;&lt;/returns&gt;&#xD;
Private Function _CheckIpAddress(target As UShort) As Boolean&#xD;
	Try&#xD;
		For Each addr In System.Net.Dns.GetHostEntry(System.Net.Dns.GetHostName()).AddressList&#xD;
			&#xD;
			' If local network&#xD;
			If addr.AddressFamily =   System.Net.Sockets.AddressFamily.InterNetwork Then&#xD;
				' Check if IP address start with "172.29"&#xD;
                If addr.ToString.StartsWith("172.29.") Then&#xD;
					' Check if IP address finishes with target&#xD;
					If addr.ToString.Substring(addr.ToString.Length - 3, 3) = target.ToString() Then &#xD;
						Return True&#xD;
					End If&#xD;
				End If &#xD;
			End If&#xD;
		Next&#xD;
		&#xD;
	Catch ex As System.Exception&#xD;
		Return False&#xD;
	End Try&#xD;
	&#xD;
	Return False&#xD;
End Function</Text></CodeEditorModel>