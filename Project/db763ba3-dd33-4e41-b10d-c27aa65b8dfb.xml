<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class SAV_Valid&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"PCS_THE.Maint","Comment":"SAV maintenance manager","RawComment":null,"DataTypeName":"PCS_THE\\THE_SAV","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"e9a28141-7128-4627-8b9b-311cf169018d","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"Maint","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":500,"MappedDeviceName":"PCS_THE","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"","RawComment":null,"DataTypeName":"String","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"b5919a02-18fa-4764-92a6-af6763943ffa","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"Temp_STR","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}}]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"8c8a08ea-8bcb-4f97-9f9b-5c1f33438175"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"a726a7c7-7625-4548-9130-7e7557934c7a"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>'Code behind Page - Add local subroutines for the page.&#xD;
&#xD;
Sub CheckKey&#xD;
        Dim md5 As New System.Security.Cryptography.MD5CryptoServiceProvider&#xD;
        Dim TexteEnBit() As Byte&#xD;
        Dim TexteHache() As Byte&#xD;
&#xD;
		Dim TextToConvert As String&#xD;
		Dim Key As String&#xD;
		&#xD;
		' Convert text in good format&#xD;
		TextToConvert = SAV.Code.ToString("000000000")&#xD;
		&#xD;
        ' Récupération de la valeur en bit du texte à hacher&#xD;
        TexteEnBit = System.Text.Encoding.UTF8.GetBytes("Pierre" &amp; TextToConvert &amp; "THE_Machines")&#xD;
&#xD;
        ' Hachage&#xD;
        TexteHache = md5.ComputeHash(TexteEnBit)&#xD;
&#xD;
        'Libération des ressources&#xD;
        md5.Clear()&#xD;
&#xD;
        ' Renvoi&#xD;
        Key = Convert.ToBase64String(TexteHache).Substring(0,10)&#xD;
		&#xD;
		' Debug&#xD;
		'Me.L_Error.Text = Key&#xD;
		&#xD;
		' Check if key is good&#xD;
		If Key = Temp_STR Then&#xD;
			Me.B_Valide.IsEnabled = True&#xD;
			Me.I_Success.IsVisible = True&#xD;
			Me.I_Warning.IsVisible = False&#xD;
		Else&#xD;
			Me.B_Valide.IsEnabled = False&#xD;
			Me.I_Success.IsVisible = False&#xD;
			Me.I_Warning.IsVisible = True&#xD;
		End If&#xD;
		&#xD;
			&#xD;
End Sub&#xD;
 </Text></CodeEditorModel>