<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module S_Users&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"FB_PLC.HMI","Comment":"Link between PLC and NA","RawComment":null,"DataTypeName":"FB_PLC\\THE\\SCREEN","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"8cfd0cf7-4ebd-46db-8b17-3f2e2f1813d2","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":null,"Name":"HMI","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":null,"Retained":false,"UpdateRate":500,"MappedDeviceName":"FB_PLC","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"","RawComment":null,"DataTypeName":"THE_User","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"aff42d98-3141-4cfb-b994-caaa180ec80c","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"User","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"Screen is used as master","RawComment":null,"DataTypeName":"Boolean","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"b1b0a03a-4d80-4a32-906e-f4966505171c","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"IsMaster","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"(1 - Imperial, 0 - Metric)","RawComment":null,"DataTypeName":"Boolean","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"4ff27ffb-7d7c-44c2-b066-8fa5bd2574da","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"Units","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"","RawComment":null,"DataTypeName":"String","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"e64a880a-56ee-47e0-ab43-7960b6fa2400","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"DEBUG","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}}]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"d5e85de9-9502-4c55-b1c6-becd93ae0a51"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"91d81830-b3d4-4334-a4a2-af7db6265281"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>'*************************************************************************************&#xD;
'* 													User management&#xD;
'*		Autor:		Pierre Clot&#xD;
'*		Date:		19.03.2024&#xD;
'*		Version: 	S02V01&#xD;
'*&#xD;
'*		Variable to change depending on the machine:&#xD;
		#Const PCS = True&#xD;
		#Const PRT = False&#xD;
'*		&#xD;
'*		Description :&#xD;
'*		Management of user system for PCS, with status and text on the header.&#xD;
'*&#xD;
'*      S02V01 - 2024.03.20 - PC&#xD;
'*		- Add PRT precompilation variable&#xD;
'*		- Patch "PRT.Operator = User.Current.Label"&#xD;
'*&#xD;
'*		S02V00:	Timoth√©e Van Hove:&#xD;
'*		- Moved all work to S_Users&#xD;
'*		- User MsgBox for all message&#xD;
'*		- Added Temporary users&#xD;
'*		- Less user interaction to log in/out&#xD;
'*		- Added the possibility to hide users&#xD;
'*		- Added the new User structure &amp; Code Refactoring&#xD;
'*		- Ported all the code from S_Slave to S_Users for the PCS and Slave updates&#xD;
'*		- PCS and BDA S_Startup are now identical&#xD;
'*&#xD;
'*************************************************************************************&#xD;
&#xD;
Public Dim ListView() As String				' List of user by Code (Instance name)&#xD;
Public Dim ListData() As String				' List of user by Code, only NOT THE user (Instance name)&#xD;
Private Dim Sel_User As String				' Currently selected user first name + last name&#xD;
Private Dim Sel_Code As String				' Currently selected user code&#xD;
Private Dim _oneTimeSeed As Integer		'Seed used to generate the one-time password at each startup&#xD;
Private Dim _timeout As DateTime&#xD;
&#xD;
' User level needed to create an acount&#xD;
Private Const LEVEL_CREATE As UShort = 40&#xD;
Private Const POPUP_EDIT As String = "Users_Edit"&#xD;
Private Const TEMP_USER As String = "_tmp"&#xD;
Private Const ICON_LOGIN As String = "THE_FA_User"&#xD;
Private Const PASSWORD ="K9Rz7jPCTfTVEt42"			' Password of all the User accounts in the project&#xD;
Public Const PASS_LENGTH As UShort = 3&#xD;
Private Const CODE_LENGTH As UShort = 4&#xD;
Private Const LABEL_LENGTH As UShort = 4&#xD;
&#xD;
#Region "Events"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when an user is logout&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnLogOut&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "PCS &amp; Slave Updates"&#xD;
'*		Description :&#xD;
'*		Communication between the PLC and the HMI for user, time, recipe and language.&#xD;
'*		The link is done with the variable HMI from THE_SCREEN structure.&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' PLC order to slave screen to update something. The update can be a user login, a language change or the date and time.&#xD;
''' This subroutine must be called by "HMI.Update" as Global Events !&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub MasterUpdate&#xD;
		&#xD;
	' Check if user change&#xD;
	If HMI.Users.Update Then&#xD;
		' Check if login or logout&#xD;
		If HMI.Users.Level &lt;&gt; 0 Then&#xD;
			External_LogIn()&#xD;
		Else&#xD;
			LogOutCurrentUser()&#xD;
		End If &#xD;
	End If&#xD;
	&#xD;
	' Check if language change&#xD;
	If HMI.Language.Update Then&#xD;
		' Change HMI language&#xD;
		ChangeLanguage()&#xD;
	End If &#xD;
	&#xD;
	' Check if time change&#xD;
	If HMI.DateAndTime.Update_FromHMI Then		&#xD;
		' Change HMI date&#xD;
		SetTime() &#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when an update are requested from PCS.&#xD;
''' This subroutine must be called by "PCS_HMI.Update" as Global Events !&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub PCSUpdate()&#xD;
# If PCS Then&#xD;
#Else&#xD;
	' Exit if PCS is not connected&#xD;
	If Not PCS_HMI.Connected Then&#xD;
		Exit Sub&#xD;
	End If &#xD;
			&#xD;
	' Check if user change&#xD;
	If PCS_HMI.Users.Update Then&#xD;
		&#xD;
		' Check if login or logout&#xD;
		If PCS_HMI.Users.Level &lt;&gt; 0 Then&#xD;
			' Save in local structure datas&#xD;
			HMI.Users.Level = PCS_HMI.Users.Level&#xD;
			HMI.Users.Code = PCS_HMI.Users.Code&#xD;
			External_LogIn()&#xD;
		Else&#xD;
			LogOutCurrentUser()&#xD;
		End If &#xD;
	End If&#xD;
	&#xD;
	' Check if language change&#xD;
	If PCS_HMI.Language.Update Then&#xD;
		&#xD;
		' Save in local structure datas&#xD;
		HMI.Language.Option = PCS_HMI.Language.Option&#xD;
		HMI.Language.Selected = PCS_HMI.Language.Selected&#xD;
		&#xD;
		' Ask for an update&#xD;
		HMI.Language.Update = True&#xD;
	End If&#xD;
	&#xD;
	' Check if time change&#xD;
	If PCS_HMI.DateAndTime.Update_FromHMI Then&#xD;
		&#xD;
		' Save in local structure datas&#xD;
		HMI.DateAndTime.NewDate = PCS_HMI.DateAndTime.NewDate&#xD;
		&#xD;
		' Ask for an update&#xD;
		HMI.DateAndTime.Update_FromHMI  = True&#xD;
	End If&#xD;
#End If&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Startup"&#xD;
&#xD;
Public Sub Startup&#xD;
	AddHandler S_Event.OnDayChange, AddressOf _CheckTempUserTime&#xD;
		&#xD;
	'Init the temp user recipe and one time seed&#xD;
	_InitTempUser()&#xD;
	&#xD;
	'Load info from the PCS&#xD;
	_Check_PCS_Status()&#xD;
	&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Check master state. Load different part of user system if needed&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _Check_PCS_Status()&#xD;
#If PCS Then&#xD;
#Else&#xD;
	If PCS_HMI.Connected Then&#xD;
		&#xD;
		HMI.Users.Level = PCS_HMI.Users.Level&#xD;
		HMI.Users.Code = PCS_HMI.Users.Code&#xD;
		External_LogIn()&#xD;
		&#xD;
		HMI.Language.Option = PCS_HMI.Language.Option&#xD;
		HMI.Language.Selected = PCS_HMI.Language.Selected&#xD;
		ChangeLanguage()&#xD;
	&#xD;
	End If&#xD;
#End If&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Temporary user"&#xD;
&#xD;
Private Sub _CheckTempUserTime&#xD;
	If _CompareUserCodes(User.Current.Code, TEMP_USER) Then&#xD;
		LogOutCurrentUser()	&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Set a unique password to the temp user at each start and each session timeout&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _InitTempUser()&#xD;
	'Generate a 6 digit random seed&#xD;
	_oneTimeSeed = New System.Random().Next(0, 999999)&#xD;
	&#xD;
	'Create a list of users&#xD;
	Dim users As New System.Collections.Generic.List(Of String)&#xD;
	users.AddRange(GetRecipeNames("users"))&#xD;
	&#xD;
	'Check if the _tmp user exists&#xD;
	If Not users.Contains(TEMP_USER) Then&#xD;
		AddRecipe("users",TEMP_USER)&#xD;
		SetRecipeIngredients("users", TEMP_USER, {"Level", "FirstName", "Hide"}, {"70","Temporary user", "True"})&#xD;
		SaveRecipe("users",TEMP_USER)&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "User list management"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The user list as changed. Used by List IAG to update the user list&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnListUpdate()&#xD;
	&#xD;
''' &lt;summary&gt;&#xD;
''' Call this function to create the users list.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetList()&#xD;
&#xD;
	'Use lists because it is way simpler to work with&#xD;
    Dim ListDataTemp As New System.Collections.Generic.List(Of String)&#xD;
    Dim ListViewTemp As New System.Collections.Generic.List(Of String)&#xD;
&#xD;
    ' Populate the temporary lists with the users that are not THE and not hidden&#xD;
    For Each usr As String In GetRecipeNames("users")&#xD;
		' If current user is THE or if hidden button toggled =&gt; display all users. Display hidden users only if currentUser is &gt;= 60 and user is not THE. Else if the user is neither hidden nor THE display it&#xD;
		' Note: I put the GetRecipeIngredientValue() function calls inside the If statement to take advantage of short-circuit of the AndAlso/OrElse. This is Optimization&#xD;
        If AsTHE OrElse User.Current.THE OrElse (User.Current.Level &gt;= 60 OrElse Not GetRecipeIngredientValue("users", usr, "Hide")) AndAlso Not GetRecipeIngredientValue("users", usr, "THE") Then&#xD;
			ListDataTemp.Add(usr)&#xD;
            ListViewTemp.Add(GetRecipeIngredientValue("users", usr, "LastName") + " " + GetRecipeIngredientValue("users", usr, "FirstName"))&#xD;
        End If&#xD;
    Next&#xD;
&#xD;
    ' Convert List to Array&#xD;
    ListData = ListDataTemp.ToArray()&#xD;
    ListView = ListViewTemp.ToArray()&#xD;
&#xD;
    ' Sort the arrays by alphabetical order of the user DisplayName&#xD;
    Array.Sort(ListView, ListData)&#xD;
&#xD;
    ' Invoke the OnListUpdate event&#xD;
    RaiseEvent OnListUpdate()&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call by list event&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="View"&gt;Full name of selected user&lt;/param&gt;&#xD;
''' &lt;param name="Value"&gt;Intance name of selected user&lt;/param&gt;&#xD;
Public Sub ListChange(ByVal View As String, ByVal Value As String)&#xD;
&#xD;
	' Update Sel_User &amp; Sel_Code &#xD;
	Sel_User = View&#xD;
	Sel_Code = Value&#xD;
	&#xD;
	'Set default rights to false&#xD;
	User.Sta.Editable = False&#xD;
	User.Sta.Deletable = False&#xD;
	User.Sta.Creatable = False&#xD;
	&#xD;
	'Creatable status&#xD;
	If User.Current.Level &gt;= LEVEL_CREATE Then&#xD;
		User.Sta.Creatable = True&#xD;
	Else&#xD;
		Exit Sub&#xD;
	End If&#xD;
		&#xD;
	' Edit status of action&#xD;
	If Sel_Code &lt;&gt; "" AndAlso Not _CompareUserCodes(Sel_Code, TEMP_USER) Then&#xD;
&#xD;
			'If the level of the current user is equal or higher than the selected user, set a permission bit &#xD;
			If User.Current.Level &gt;= GetRecipeIngredientValue("users",Sel_Code,"Level") Then&#xD;
			&#xD;
				' Selected user is editable&#xD;
				User.Sta.Editable = True&#xD;
				&#xD;
				' A user cannot delete himself&#xD;
				User.Sta.Deletable = (Not _CompareUserCodes(User.Current.Code, Sel_Code)) AndAlso True&#xD;
			End If&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
#Region "THE users"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Value of selected item. If value are not used, it will return the selected value&#xD;
''' &lt;/summary&gt;&#xD;
Public Property AsTHE As Boolean&#xD;
	&#xD;
    Get&#xD;
		Return _AsTHE&#xD;
    End Get&#xD;
	&#xD;
    Set(ByVal val As Boolean)&#xD;
		' Check if the state change&#xD;
		If _AsTHE &lt;&gt; val Then&#xD;
			&#xD;
			' Update value&#xD;
        	_AsTHE = val&#xD;
	&#xD;
			SetList()&#xD;
		End If&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
&#xD;
Private _AsTHE As Boolean = False&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Show THE user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Set_AllUsers()&#xD;
	AsTHE = True&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Show customer user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Set_OnlyCustomer()&#xD;
	AsTHE = False&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Invert if we see THE user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Toggle_AsTHE()&#xD;
	AsTHE = Not AsTHE&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Login"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Ask user for his password, and if the password is OK, log this user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub PromptPassword&#xD;
	&#xD;
	' Check if a user is selected&#xD;
	If Sel_Code = "" Then&#xD;
		S_PopUp.MsgBox(GetResourceString("THE_User_NotSel"), GetResourceString("THE_User_PopUpTitle"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_LOGIN)&#xD;
		Exit Sub&#xD;
	End If&#xD;
&#xD;
	' Subscribe to keypad close&#xD;
	RemoveHandler S_Event.OnInput, AddressOf _ComparePasswordAndLog&#xD;
	AddHandler S_Event.OnInput, AddressOf _ComparePasswordAndLog&#xD;
		&#xD;
	Dim Caption As String =  GetResourceString("THE_User") + ": " + Sel_User&#xD;
	&#xD;
	'If we want to log the temp user, display seed in the keyboard window&#xD;
	If Sel_Code = TEMP_USER Then&#xD;
		Caption = "Temporary user ID: " + _oneTimeSeed.ToString("000-000")&#xD;
	End If&#xD;
	&#xD;
	EditVariable("User.Arg.Password",Caption,,,,,True,,,"English")&#xD;
	&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' External login user for slave HMI.&#xD;
''' Input: 	From PLC "HMI.Users.Level" (number from 10 to 100)&#xD;
''' 				From PLC "HMI.Users.Code" (unique 4 char value)&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub External_LogIn()&#xD;
	' Clear User.Current struct&#xD;
	User.Current = New UserDatas()&#xD;
	User.Current.Level = HMI.Users.Level &#xD;
	User.Current.Code = HMI.Users.Code&#xD;
	_LogUser(HMI.Users.Level )&#xD;
	User.Info = GetResourceString("THE_User_External") +" "+ User.Current.Level.ToString() &#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Auto log for debug&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub AutoLog()&#xD;
	' Clear User.Current struct&#xD;
	User.Current = New UserDatas()&#xD;
	User.Current.Level = 100 &#xD;
	User.Current.Code = "THE"&#xD;
	_LogUser(User.Current.Level)&#xD;
	User.Info = GetResourceString("THE_User_External") +" "+ User.Current.Level.ToString() &#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Logs the user in the corresponding account&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub LogInUserRFID()&#xD;
	_LogUser(User.Current.Level)&#xD;
	'S_Log.UserHasLoggedIn() TODO: Recode Log management&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Log a user in&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="code"&gt;Code of user to log&lt;/param&gt;&#xD;
Private Sub _LogSelectedUser(code As String)&#xD;
	'Load the current user rom recipe&#xD;
	User.Current = _LoadUserFromRecipe(code)&#xD;
	&#xD;
	' Don't update label for THE or tempory user&#xD;
	If Not User.Current.THE AndAlso Not User.Current.Label = TEMP_USER Then&#xD;
		&#xD;
		' If custom label is not used, load the operator code&#xD;
		If User.Current.Label = "" Then&#xD;
			User.Current.Label = User.Current.Code&#xD;
		End If&#xD;
&#xD;
		#If PRT Then&#xD;
		' Write operator for label in PRT structure&#xD;
		PRT.Operator = User.Current.Label&#xD;
		#End If&#xD;
	End If&#xD;
	&#xD;
	' Log the user in the NA&#xD;
	_LogUser(User.Current.Level)&#xD;
	&#xD;
End Sub&#xD;
&#xD;
Private Sub _LogUser(level As UShort)&#xD;
	' Case that links the user level of the recipe with the User account name&#xD;
	Select Case level&#xD;
	Case 10&#xD;
		Login("Restricted_Operator", PASSWORD)&#xD;
	Case 20&#xD;
		Login("Operator", PASSWORD)&#xD;
	Case 30&#xD;
		Login("Confirmed_Operator", PASSWORD)&#xD;
	Case 40&#xD;
		Login("Maintenance", PASSWORD)&#xD;
	Case 50&#xD;
		Login("Supervisor", PASSWORD)&#xD;
	Case 60&#xD;
		Login("Manager", PASSWORD)&#xD;
	Case 70&#xD;
		Login("Temporary_User", PASSWORD)&#xD;
	Case 80&#xD;
		Login("THE_Tech", PASSWORD)&#xD;
	Case 90&#xD;
		Login("Commissioning", PASSWORD)&#xD;
	Case 100&#xD;
		Login("Administrator", PASSWORD)&#xD;
	End Select&#xD;
	&#xD;
	' Set user name&#xD;
	User.Info = User.Current.LastName +" "+ User.Current.FirstName&#xD;
	&#xD;
	' If it's master HMI, send datas to PLC&#xD;
	If User.IsMaster Then&#xD;
		' Save datas for PLC&#xD;
		HMI.Users.Code =User.Current.Code&#xD;
		HMI.Users.Level =User.Current.Level&#xD;
		&#xD;
		' Inform PLC of user change&#xD;
		HMI.Users.Update = True&#xD;
	End If	&#xD;
	&#xD;
	' Update menu selection to potentially see hidden users (if level &gt;= 50)&#xD;
	SetList()&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when the user set a password&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _ComparePasswordAndLog&#xD;
	&#xD;
	' Unsubscribe to keypad&#xD;
	RemoveHandler S_Event.OnInput, AddressOf _ComparePasswordAndLog&#xD;
	&#xD;
	' Get text&#xD;
	Dim PswIn As String = User.Arg.Password&#xD;
	Dim PswSave As String = GetRecipeIngredientValue("users", Sel_Code ,"Password")&#xD;
	User.Arg.Password = ""&#xD;
	&#xD;
	'If it is TMP user, we do not retreive the password from the recipe, but from the hashed seed&#xD;
	If Sel_Code = TEMP_USER Then &#xD;
		PswSave =  _Hash(_oneTimeSeed.ToString("000000"), TEMP_USER)&#xD;
	Else&#xD;
		'Hash password thet the user entered to be compared&#xD;
		PswIn = _Hash(PswIn, Sel_Code)&#xD;
	End If&#xD;
	&#xD;
	' Check if password is correct&#xD;
	If PswIn = PswSave Then&#xD;
&#xD;
		'Reset the one-time seed of the temp user&#xD;
		If Sel_Code = TEMP_USER Then _InitTempUser()&#xD;
&#xD;
		' Log selected user in&#xD;
		_LogSelectedUser(Sel_Code)&#xD;
		&#xD;
		' Show a login pop up&#xD;
		Dim msg As String = User.Info + " " + GetResourceString("THE_User_SuccessLogin")&#xD;
		S_PopUp.MsgBox(msg, GetResourceString("THE_User") + ": " + User.Info,  S_Popup.MessageBoxIcon.Success, MessageBoxButtons.OK, ICON_LOGIN)&#xD;
	Else&#xD;
		Dim Caption As String = GetResourceString("THE_User") + ": " + Sel_User&#xD;
		S_PopUp.MsgBox(GetResourceString("THE_User_WrongPwd"), Caption,  S_Popup.MessageBoxIcon.Erreur, MessageBoxButtons.OK, ICON_LOGIN)&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Hashes the given userCode and password with MD5&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="userCode"&gt;Code of user to be hashed&lt;/param&gt;&#xD;
''' &lt;param name="pass"&gt;The password to be hashed&lt;/param&gt;&#xD;
Private Function _Hash(pass As String, userCode As String) As String&#xD;
&#xD;
	' The Using statement ensures the cleanup (dispose) of the md5 object for us&#xD;
	Using md5 As New System.Security.Cryptography.MD5CryptoServiceProvider&#xD;
&#xD;
		' Hash the usercode + password&#xD;
        Dim TextByte() As Byte = System.Text.Encoding.UTF8.GetBytes("My" &amp; (userCode + pass) &amp; "Pass")&#xD;
        Dim TextHash() As Byte = md5.ComputeHash(TextByte)&#xD;
&#xD;
        ' Return the first 10 characters&#xD;
        Return Convert.ToBase64String(TextHash).Substring(0, 10)&#xD;
    End Using&#xD;
&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Retieve a User rom the recipe with its code&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="userCode"&gt;Code of user to be loaded&lt;/param&gt;&#xD;
''' &lt;param name="loadPassword"&gt;whether or not to load the password&lt;/param&gt;&#xD;
Private Function _LoadUserFromRecipe(ByRef userCode As String, Optional ByVal loadPassword As Boolean = True) As UserDatas&#xD;
	Dim Usr As New UserDatas&#xD;
	Usr.Badge			= GetRecipeIngredientValue("users", userCode, "Badge")&#xD;
	Usr.Level				= GetRecipeIngredientValue("users", userCode, "Level")&#xD;
	Usr.FirstName		= GetRecipeIngredientValue("users", userCode, "FirstName")&#xD;
	Usr.LastName		= GetRecipeIngredientValue("users", userCode, "LastName")&#xD;
	Usr.Label				= GetRecipeIngredientValue("users", userCode, "Label")&#xD;
	Usr.Hide				= GetRecipeIngredientValue("users", userCode, "Hide")&#xD;
	Usr.THE				= GetRecipeIngredientValue("users", userCode, "THE")&#xD;
	Usr.Code				= userCode&#xD;
	&#xD;
	If loadPassword Then&#xD;
		Usr.Password = GetRecipeIngredientValue("users", userCode, "Password")&#xD;
	End If&#xD;
	&#xD;
	Return Usr&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Compares 2 user codes. Not case sensitive&#xD;
''' &lt;/summary&gt;&#xD;
Private Function _CompareUserCodes(code1 As String, code2 As String) As Boolean&#xD;
	Return code1.ToUpper() = code2.ToUpper()&#xD;
End Function&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Logout"&#xD;
''' &lt;summary&gt;&#xD;
''' Logout the current user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub LogOutCurrentUser&#xD;
	&#xD;
	RemoveHandler S_Event.OnInput, AddressOf _CheckTempUserTime&#xD;
	&#xD;
	' Clear datas&#xD;
	User.Current = New UserDatas()&#xD;
	User.Sta = New UserStatus()&#xD;
	User.Info = ""&#xD;
	&#xD;
	' Logout user on NA&#xD;
	Logout()&#xD;
	&#xD;
	If AsTHE = False Then&#xD;
		'Update the list =&gt; it will update the User.Sta&#xD;
		SetList()&#xD;
	Else&#xD;
		'AsTHE already calls SetList if it's value change =&gt; avoid calling setList twice&#xD;
		AsTHE = False&#xD;
	End If&#xD;
	&#xD;
	' If master, notify on PLC the logout&#xD;
	If User.IsMaster Then&#xD;
		' Save datas for PLC&#xD;
		HMI.Users.Code = ""&#xD;
		HMI.Users.Level = 0&#xD;
		&#xD;
		' Inform PLC of user change&#xD;
		HMI.Users.Update = True&#xD;
	End If&#xD;
End Sub&#xD;
#End Region&#xD;
&#xD;
#Region "User Pop up"&#xD;
&#xD;
#Region "Add user"&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to add a new user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Add()&#xD;
	'Clear the User.Edit structure&#xD;
	User.Edit = New UserDatas()&#xD;
	&#xD;
	' Open popup to add a new user&#xD;
	User.Arg.Edit = False&#xD;
	ShowPage(POPUP_EDIT)&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Edit user"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to edit a user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Edit()&#xD;
	' Load selcted user in User.Edit structure&#xD;
	User.Edit = _LoadUserFromRecipe(Sel_Code, False)&#xD;
&#xD;
	' Open popup to edit an user&#xD;
	User.Arg.Edit = True&#xD;
	ShowPage(POPUP_EDIT)&#xD;
End Sub&#xD;
&#xD;
Public Sub OnValidateEditPopUp()&#xD;
	'If all the conditions are passed, add/edit the user in the user's recipes&#xD;
	If User.Arg.isPopUpValid Then&#xD;
		&#xD;
		'If we are editing a user&#xD;
		If User.Arg.Edit Then&#xD;
			'Before deleting the existing recipe, we retreive the password only if it hasn't been modified&#xD;
			If User.Edit.Password = "" Then&#xD;
				User.Edit.Password = GetRecipeIngredientValue("users", User.Edit.Code, "Password")&#xD;
			Else &#xD;
				'hash the edited user password&#xD;
				User.Edit.Password = _Hash(User.Edit.Password, User.Edit.Code)&#xD;
			End If&#xD;
			DeleteRecipe("users",User.Edit.Code)&#xD;
		Else&#xD;
			'hash the new user password&#xD;
			User.Edit.Password = _Hash(User.Edit.Password, User.Edit.Code)	&#xD;
			Sel_Code = User.Edit.Code&#xD;
		End If&#xD;
		&#xD;
		'Save changes&#xD;
		AddRecipe("users",User.Edit.Code)&#xD;
		ReadRecipeFromController("users",User.Edit.Code)&#xD;
		SaveRecipe("users",User.Edit.Code)&#xD;
		&#xD;
		'Create a backup&#xD;
		_Backup()&#xD;
		&#xD;
		'Update the list&#xD;
		SetList()&#xD;
		&#xD;
		ShowPage("Users_Main")&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
Public Sub GenerateUserCode()&#xD;
' If both the First and Last names boxes are filled and the Code name box is empty, fill the Code Name with the 2 first letters&#xD;
	If (User.Edit.FirstName &lt;&gt; "") AndAlso (User.Edit.LastName &lt;&gt; "")  AndAlso (User.Edit.Code = "") Then&#xD;
		User.Edit.Code = User.Edit.FirstName.Substring(0,2) + User.Edit.LastName.Substring(0,2)&#xD;
	End If&#xD;
&#xD;
	'Transform the user code to upper case&#xD;
	If User.Edit.Code &lt;&gt; ""&#xD;
		User.Edit.Code=User.Edit.Code.ToUpper()&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the password length is too short&#xD;
''' &lt;/summary&gt;&#xD;
Public Function CheckPasswordLength() As Boolean&#xD;
	If Not User.Arg.Edit OrElse (User.Arg.Edit AndAlso User.Edit.Password &lt;&gt; "") Then&#xD;
		'Check the password length only if we are creating a new user, or if we are editing one and the password has been modified&#xD;
		Return  User.Edit.Password.Length &gt;= PASS_LENGTH&#xD;
	End If&#xD;
	Return True&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the label length is too long&#xD;
''' &lt;/summary&gt;&#xD;
Public Function CheckLabel() As Boolean&#xD;
	Return  User.Edit.Label.Length &lt;= LABEL_LENGTH&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the UserCode length is wrong&#xD;
''' &lt;/summary&gt;&#xD;
Public Function CheckUserCodeLength() As Boolean&#xD;
	Return User.Edit.Code.Length = CODE_LENGTH&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the UserCode is not uniqe&#xD;
''' &lt;/summary&gt;&#xD;
Public Function CheckUserCodeUnique() As Boolean&#xD;
    For Each userCode As String In GetRecipeNames("users")&#xD;
        If _CompareUserCodes(User.Edit.Code, userCode)Then&#xD;
            If Not User.Arg.Edit Then	&#xD;
				Return False&#xD;
			End If&#xD;
		End If&#xD;
    Next&#xD;
    Return True&#xD;
End Function &#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Open english keyboard to edit the label value&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub LabelEdit()&#xD;
	' Open english keyboard&#xD;
	EditVariable("User.Edit.Label",,,,,,,,,"English")&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Delete user"&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to delete an user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Delete&#xD;
	AddHandler S_PopUp.Response, AddressOf _OnValidateDeletePopUp&#xD;
	Dim DeleteMsg As String =  GetResourceString("THE_User_Delete")&#xD;
	Dim Usr As String = GetResourceString("THE_User") + ": " + Sel_User&#xD;
	Dim msg As String = DeleteMsg + " " + Sel_User + " " + "?"&#xD;
	S_PopUp.MsgBox(msg, Usr, MessageBoxIcon.Question, MessageBoxButtons.YesNo, "THE_FA_UserMinus")&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Called when the user closes/validates the "Delete user pop up"&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _OnValidateDeletePopUp(ByVal Value As DialogResult)&#xD;
	If Value = DialogResult.Yes Then&#xD;
		DeleteRecipe("users", Sel_Code)&#xD;
		SaveAllRecipes("users")&#xD;
		_Backup()&#xD;
	End If&#xD;
	&#xD;
	'Update the list&#xD;
	SetList()&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _OnValidateDeletePopUp&#xD;
End Sub&#xD;
#End Region&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Language"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Change language of HMI. If user level is 50 or higher, the change is persistant.&#xD;
''' &#xD;
''' Input: 	User.Current.Level 			User level&#xD;
''' 				HMI.Language.Selected		Selected language&#xD;
''' &lt;/summary&gt;&#xD;
Sub ChangeLanguage()&#xD;
	&#xD;
	' If user is high then level 50, make language change persistant&#xD;
	Dim Def As Boolean = User.Current.Level &gt;= 50&#xD;
&#xD;
	' The slave device write language as persistant.&#xD;
	If Not User.IsMaster Then&#xD;
		Def = True&#xD;
	End If&#xD;
	&#xD;
	' Set HMI language&#xD;
	Select Case HMI.Language.Selected&#xD;
    Case 0 &#xD;
		SetLanguage("en-GB", Def)&#xD;
    Case 1&#xD;
		SetLanguage("tr-TR", Def)	&#xD;
    Case 2&#xD;
		SetLanguage("it-IT", Def)&#xD;
	Case 3&#xD;
		SetLanguage("es-ES", Def)&#xD;
	Case 4&#xD;
		SetLanguage("pt-PT", Def)&#xD;
	Case 5&#xD;
		SetLanguage("fr-CH", Def)&#xD;
	Case 6&#xD;
		SetLanguage("de-DE", Def)&#xD;
	Case 7&#xD;
		SetLanguage("ru-RU", Def)&#xD;
	Case 8&#xD;
		SetLanguage("bg-BG", Def)&#xD;
	Case 9&#xD;
		SetLanguage("sv-SE", Def)&#xD;
	Case 10&#xD;
		SetLanguage("ro-RO", Def)&#xD;
	End Select&#xD;
	&#xD;
#If PCS Then&#xD;
	' Check every machine on the line, get the name in new language&#xD;
	Call S_Startup.Machine_Def	&#xD;
#End If&#xD;
	&#xD;
	' If master HMI, notify PLC of language change&#xD;
	If User.IsMaster Then&#xD;
	#If PCS Then&#xD;
		' Update recipe list and get the name in new language&#xD;
		Call S_Recipe.Fill_Viewer	&#xD;
	#End If&#xD;
		' Send datas to PLC&#xD;
		HMI.Language.Update = True&#xD;
	End If 	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Date and time"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Change time of HMI&#xD;
''' Input: 	HMI.DateAndTime.NewDate		Date from PLC&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetTime()&#xD;
	&#xD;
	'When the user clicks on the "Validate" button, the variables are set&#xD;
	SetDateTime(HMI.DateAndTime.NewDate)&#xD;
	&#xD;
End Sub&#xD;
	&#xD;
#End Region&#xD;
&#xD;
#Region "Units"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Switches between imperial and metric units&#xD;
''' &lt;/summary&gt;&#xD;
Sub UnitsChange()&#xD;
	&#xD;
	Units = Not Units&#xD;
	If Units = True Then&#xD;
		HMI.Unit.Speed = True&#xD;
		HMI.Unit.Temperature = True&#xD;
		HMI.Unit.Pressure = True&#xD;
		HMI.Unit.Vacuum = True&#xD;
		HMI.Unit.Length_mm = True&#xD;
		HMI.Unit.Length_cm = True&#xD;
		HMI.Unit.Length_m = True&#xD;
		HMI.Unit.Flow = True		&#xD;
		HMI.Unit.Mass = True&#xD;
	Else&#xD;
		HMI.Unit.Speed = False&#xD;
		HMI.Unit.Temperature = False&#xD;
		HMI.Unit.Pressure = False&#xD;
		HMI.Unit.Vacuum = False&#xD;
		HMI.Unit.Length_mm = False&#xD;
		HMI.Unit.Length_cm = False&#xD;
		HMI.Unit.Length_m = False&#xD;
		HMI.Unit.Flow = False		&#xD;
		HMI.Unit.Mass = False&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
	&#xD;
#End Region&#xD;
&#xD;
#Region "File managment"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Imports the backed-up recipe file from the NA file system&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Restore()&#xD;
&#xD;
	' Load recipe if file existe&#xD;
	If System.IO.File.Exists(S_Path.RECIPES &amp; "users.csv") Then&#xD;
		ImportRecipes("users", S_Path.RECIPES &amp; "users.csv")&#xD;
	End If&#xD;
&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Back-up the users on the SD card (if exists), or in the NA filesystem (if the SD card doen't exists)&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _Backup()&#xD;
	' Save all recipes in the NA datasbase&#xD;
	SaveAllRecipes("users")&#xD;
	&#xD;
	DEBUG = "User: Start backup"&#xD;
		&#xD;
	' If the SD directory doesn't exist, exit with message box&#xD;
	If Not S_Path.SD_IsPresent Then&#xD;
		' Show pop-up (perhaps don't work because already open !)&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_SDCard_Missing"), GetResourceString("THE_A_Backup"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, "THE_FA_SD_Card")&#xD;
		&#xD;
		' Debug info&#xD;
		DEBUG = "User: Backup not executed because SD card not found !"&#xD;
		Exit Sub&#xD;
	End If &#xD;
&#xD;
	' Create path if dosen't existe &#xD;
	If Not System.IO.Directory.Exists(S_Path.RECIPES) Then&#xD;
    	System.IO.Directory.CreateDirectory(S_Path.RECIPES)&#xD;
		&#xD;
		' Debug info&#xD;
		DEBUG = "User: New directory created '" &amp; S_Path.RECIPES &amp; "'"&#xD;
	End If&#xD;
&#xD;
	DEBUG = "User: Try to save as '" &amp; S_Path.RECIPES &amp; "users.csv"&#xD;
	' Save recipe file in SD card&#xD;
	'Try&#xD;
		System.IO.File.Copy("\User\SysmacHMI\users.csv", S_Path.RECIPES &amp; "users.csv", True)&#xD;
	'Catch Ex As System.Exception&#xD;
	'	Msg.Text=Ex.ToString&#xD;
	'End Try&#xD;
End Sub&#xD;
&#xD;
#End Region</Text></CodeEditorModel>